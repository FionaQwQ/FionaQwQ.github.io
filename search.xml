<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Object</title>
      <link href="/2019/12/26/Object/"/>
      <url>/2019/12/26/Object/</url>
      
        <content type="html"><![CDATA[<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>简单基本类型本身并不是对象。<br>null有时会被当作一种对象类型，但是这其实是语言本身的一个bug，即对null执行<em>typeof null</em>时会返回字符串”object”。实际上，<strong>null本身是基本类型</strong>。<br>不同的对象在底层都表示为二进制，在JS中二进制前三位都为0的话会被判断为object类型，null的二进制表示全是0，所以执行typeof 时会返回”object”。</p><h3 id="对象子类型"><a href="#对象子类型" class="headerlink" title="对象子类型"></a>对象子类型</h3><p>JS中有许多特殊的对象子类型，可以称之为复杂基本类型。</p><p><strong>函数</strong>就是对象的一个子类型，<strong>数组</strong>也是对象的一种类型。</p><p>JS中还有一些对象子类型，通常被称为<strong>内置对象</strong>。<br>有些内置对象的名称看起来和简单基础类型一样，不过实际上它们的关系更复杂。<br><em>String Number Boolean Object Function Array Date RegExp Error</em><br>它们实际上只是一些内置函数，可以使用new来产生函数调用，从而构造一个对应子类型的新对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"I am a string"</span></span><br><span class="line"><span class="keyword">typeof</span> str <span class="comment">// "string"</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stro = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"I am a stirng"</span>)</span><br><span class="line"><span class="keyword">typeof</span> stro <span class="comment">// "object"</span></span><br><span class="line">stro <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call( stro ) <span class="comment">// [object String]</span></span><br></pre></td></tr></table></figure><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>原始值”I am a string”并不是一个对象，它只是一个<strong>字面量</strong>，并且是一个不可变的值。<br>如果要在这个字面量上执行一些操作，比如获取长度、访问其中某个字符等，那需要将其转换为String对象。</p><p>在必要时语言会自动地把字符串字面量转换成一个String对象，也就是说你并不需要显式创建一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"I am a string"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.length ) <span class="comment">//13</span></span><br><span class="line"><span class="built_in">console</span>.log( str.charAt( <span class="number">3</span> ) ) <span class="comment">// 'm'</span></span><br></pre></td></tr></table></figure><p>引擎自动把字面量转换成String对象，所以可以访问属性和方法。</p><p>在引擎内部，存储在对象容器内部的是其<strong>属性的名称</strong>，它们就像指针（从技术角度来说就是引用）一样，指向属性值真正的存储位置。<br><strong>在对象中，属性名永远是字符串。</strong></p><h3 id="可计算属性名"><a href="#可计算属性名" class="headerlink" title="可计算属性名"></a>可计算属性名</h3><p>ES6中增加了可计算属性名，可以在文字形式中使用[]包裹一个表达式来当作属性名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prefix = <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    [prefix + <span class="string">"bar"</span>]: <span class="string">"hello"</span>,</span><br><span class="line">    [prefix + <span class="string">"baz"</span>]: <span class="string">"world"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject[<span class="string">"foobar"</span>] <span class="comment">//hello</span></span><br><span class="line">myObject[<span class="string">"foobaz"</span>] <span class="comment">//world</span></span><br></pre></td></tr></table></figure><p>可计算属性名最常用的场景可能是ES6的符号（Symbol）</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>从技术角度来说，函数永远不会 属于 一个对象</p><hr><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p>从ES5开始，所有的属性都具备了属性描述符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor( myObject, <span class="string">"a"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   value: 2,</span></span><br><span class="line"><span class="comment">//   writable: true,</span></span><br><span class="line"><span class="comment">//  enumerable: true,</span></span><br><span class="line"><span class="comment">//  configurable: true    </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>在创建普通属性时属性描述符会使用默认值，也可以设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty( myObject, <span class="string">"a"</span>, &#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myObject.a <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>把<em>configurable<em>修改成false是*</em>单向操作*<em>，无法撤销。<br>但是有一个小例外，即便属性时</em>configurable:false</em>,我们还是可以把<em>writable</em>的状态从true改为false，但是无法从false改成true。</p><hr><h3 id="Object-preventExtensions-obj"><a href="#Object-preventExtensions-obj" class="headerlink" title="Object.preventExtensions(obj)"></a>Object.preventExtensions(obj)</h3><p>禁止一个对象添加新属性并且保留已有属性：<br>Object.preventExtensions(obj)</p><p>在非严格模式下，创建属性b会静默失败。<br>在严格模式下，将会抛出TypeError错误。</p><hr><h3 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal(..)"></a>Object.seal(..)</h3><p>密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性（虽然可以修改属性的值）</p><hr><h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze(..)"></a>Object.freeze(..)</h3><p>禁止对于对象本身及其任意直接属性的修改（这个对象引用的其他对象是不受影响的）</p><hr><h3 id="Get"><a href="#Get" class="headerlink" title="[[Get]]"></a>[[Get]]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.a <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>myObject.a实际上是在myObject上实现了<strong>[[Get]]</strong>操作<br>对象默认的内置[[Get]]操作首先在对象中查找是否有名称相同的属性，如果找到就会返回这个属性的值。<br>如果没有找到，就会遍历可能存在的[[prototype]]链，也就是原型链。<br>如果无论如何都没找到名称相同的属性，则会返回undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.b <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>注意，这种方法和访问变量时不一样，如果你引用了一个当前词法作用域中不存在的变量，不会返回undefined，而是会抛出<em>ReferenceError</em>异常。</p><hr><h3 id="Put"><a href="#Put" class="headerlink" title="[[Put]]"></a>[[Put]]</h3><p>[[Put]]被触发时，实际的行为取决于许多因素，包括对象中是否已经存在这个属性。<br>如果已经存在这个属性，[[Put]]算法大致会检查下面这些内容：</p><ol><li>属性是否是访问描述符？如果是并且存在<em>setter</em>就调用<em>setter</em>。</li><li>属性的数据描述符中<em>writable</em>是否是false？如果是，在非严格模式下静默失败，在严格模式下抛出TypeError。</li><li>如果都不是，将该值设置为属性的值。</li></ol><p>如果对象中不存在这个属性，[[Put]]操作会更加复杂——在[[prototype]]时详细记录。</p><h3 id="访问描述符"><a href="#访问描述符" class="headerlink" title="访问描述符"></a>访问描述符</h3><p>对象默认的[[Put]]和[[Get]]分别可以控制属性值的设置和获取。<br>当你给一个属性定义<em>getter、setter</em>或者两者都有时，这个属性会被定义为<strong>访问描述符</strong>（和数据描述符相对)。<br>对于访问描述符来说，JS会忽略它们的<em>value</em>和<em>writable</em>特性，取而代之的是关心<em>set</em>和<em>get</em>（还有<em>configurable</em>和<em>enumerable</em>）特性。<br>属性不一定包含值——它们可能是具备getter/setter的“访问描述符”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="comment">//给a定义一个getter</span></span><br><span class="line">    <span class="keyword">get</span> a() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(</span><br><span class="line">        myObject, </span><br><span class="line">        <span class="string">"b"</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//给b设置一个getter</span></span><br><span class="line">            <span class="keyword">get</span>: function() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.a * <span class="number">2</span> &#125;,</span><br><span class="line">            <span class="comment">//确保b会出现在对象的属性列表中</span></span><br><span class="line">            enumerable: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.a <span class="comment">// 2</span></span><br><span class="line">myObject.b <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>上述二者都会在对象中创建一个不包含值的属性，对于这个属性的访问会自动调用一个隐藏函数，它的返回值会被当作属性访问的返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="comment">//给a定义一个getter</span></span><br><span class="line">    <span class="keyword">get</span> a() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.a = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">myObject.a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>由于我们只定义了a的<em>getter<em>，所以对a的值进行设置时set操作会*</em>忽略赋值操作*<em>，不会抛出错误。<br>而且即便有合法的</em>setter</em>,由于我们自定义的<em>getter</em>只会返回2，所以set操作是没有意义的。<br>为了让属性更合理，还应当定义<em>setter</em>，<em>setter</em>会覆盖单个属性默认的[[Put]]赋值操作。<br>通常来说getter和setter是成对出现的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="comment">//给a定义一个getter</span></span><br><span class="line">    <span class="keyword">get</span> a() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._a_  <span class="comment">//名称_a_只是一种惯例，没有任何特殊的行为</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给a定义一个setter</span></span><br><span class="line">    <span class="keyword">set</span> a(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>._a_ = val * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.a = <span class="number">2</span></span><br><span class="line">myObject.a <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>不管是对象文字语法中的get a() {..}，还是defineProperty(..)中的显式定义，二者都会在对象中创建一个不包含值的属性，对于这个属性的访问会自动调用一个隐藏函数get，它的返回值会被当作属性访问的访问值</p><hr><h3 id="in-amp-hasOwnProperty"><a href="#in-amp-hasOwnProperty" class="headerlink" title="in&amp;hasOwnProperty"></a>in&amp;hasOwnProperty</h3><p>我们可以在不访问属性值的情况下判断对象中是否存在这个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="string">"a"</span> <span class="keyword">in</span> myObject) <span class="comment">//true</span></span><br><span class="line">(<span class="string">"b"</span> <span class="keyword">in</span> myObject) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">myObject.hasOwnProperty(<span class="string">"a"</span>) <span class="comment">//true</span></span><br><span class="line">myObject.hasOwnProperty(<span class="string">"b"</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>in</strong>操作符会检查属性名是否在对象及其[[Prototype]]原型链中。<br><strong>hasOwnProperty(..)</strong>只会检查属性是否在myObject对象中，<strong>不会检查原型链</strong></p><p><strong>注意</strong>： in检查的是某个属性名是否存在，对于数组来说要特别注意，4 in [2, 4, 6]的结果是false，因为这个数组中包含的属性名是0、1、2</p><hr><h3 id="可枚举"><a href="#可枚举" class="headerlink" title="可枚举"></a>可枚举</h3><p>可枚举——可以出现在对象属性的遍历中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;</span><br><span class="line"></span><br><span class="line">myObject.defineProperty(</span><br><span class="line">    myObject,</span><br><span class="line">    <span class="string">"a"</span>,</span><br><span class="line">    &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">myObject.defineProperty(</span><br><span class="line">    myObject,</span><br><span class="line">    <span class="string">"b"</span>,</span><br><span class="line">    &#123; <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">myObject.b <span class="comment">//3</span></span><br><span class="line">(<span class="string">"b"</span> <span class="keyword">in</span> myObject) <span class="comment">//true</span></span><br><span class="line">myObject.hasOwnProperty(<span class="string">"b"</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( k, myObject[k] )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "a" 2</span></span><br></pre></td></tr></table></figure><p>在<strong>数组</strong>上应用<em>for..in</em>循环时不仅会包含所有的数值索引，<strong>还会包含所有可枚举属性</strong>。所以最好只在对象上应用for..in循环，如果要遍历数组就使用传统的for循环来遍历数值索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.propertyIsEnumerable(<span class="string">"a"</span>)</span><br></pre></td></tr></table></figure><p>检查给定的属性名是否直接存在于对象中（而不是在原型链上）并且可枚举</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys( myObject )</span><br></pre></td></tr></table></figure><p>返回一个数组，包含所有可枚举属性（只查找对象直接包含的属性）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames( myObject )</span><br></pre></td></tr></table></figure><p>返回一个数组，包含所有属性，无论是否可枚举（只查找对象直接包含的属性）</p><hr><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="for-in"><a href="#for-in" class="headerlink" title="for..in"></a>for..in</h4><p>for..in循环可以用来遍历对象的可枚举属性列表（包括原型链）。<br>但是如何遍历属性的值呢？</p><p>对于数值索引的数组，可以使用标准的for循环来遍历值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myArray.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myArray[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><h4 id="forEach-、every-、some"><a href="#forEach-、every-、some" class="headerlink" title="forEach(..)、every(..)、some(..)"></a>forEach(..)、every(..)、some(..)</h4><p>ES5中增加了一些数组的<strong>辅助迭代器</strong>，包括<em>forEach(..)</em>、<em>every(..)</em>和<em>some(..)</em>。<br>每种辅助迭代器都可以<strong>接受一个回调函数并把它应用到数组的每个元素上</strong>，唯一区别就是它们对于回调函数返回值的处理方式不同。<br>forEach(..)会遍历数组中的所有值并忽略回调函数的返回值。<br>every(..)会一直运行直到回调函数返回false（或者假值）<br>some(..)会一直运行直到回调函数返回true（或者真值）</p><p>遍历数组下标时采用的是数字顺序（for循环或者其他迭代器），但是遍历对象属性时的顺序是不确定的，在不同的JS引擎中可能不一样。因此在不同的环境中需要保证一致性时，一定不要相信任何观察到的顺序，它们是不可靠的。</p><h4 id="for-of"><a href="#for-of" class="headerlink" title="for..of"></a>for..of</h4><p>ES6增加了一种用来遍历数组的for..of循环语法（如果对象本身定义了迭代器的话也可以遍历对象）<br>for..of循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next()方法来遍历所有返回值。<br><strong>数组</strong>有内置的@@<em>iterator</em>，因此for..of可以直接应用在数组上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( v )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步之遥</title>
      <link href="/2019/12/26/%E4%B8%80%E6%AD%A5%E4%B9%8B%E9%81%A5/"/>
      <url>/2019/12/26/%E4%B8%80%E6%AD%A5%E4%B9%8B%E9%81%A5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/av80172415?from=search&seid=16964250907446172409" target="_blank" rel="noopener">Por una Cabeza</a></p><center>这十年来做过的事</center><center>能令你无悔骄傲吗</center><center>那时候你所相信的事</center><center>没有被动摇吧</center><center>对象和缘分已出现</center> <center>成就也还算不赖吗</center><center>旅途上你增添了经历</center><center>又有让棱角消失吗</center><center>软弱吗</center><center>你成熟了会失去格调吗</center> <center>当初坚持还在吗</center><center>刀锋会磨钝吗</center><center>老练吗</center><center>你情愿变得聪明而不冲动吗</center><center>步步停下三思会累吗</center> <center>快乐吗</center><center>区区几场成败里会麻木吗</center><center>你忘掉理想只能忙于生活吗</center><center>别太迟又十年后回想快乐吗</center>]]></content>
      
      
      <categories>
          
          <category> 乌鸡鲅鱼 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[[Prototype]]</title>
      <link href="/2019/12/26/Prototype/"/>
      <url>/2019/12/26/Prototype/</url>
      
        <content type="html"><![CDATA[<h2 id="Prototype"><a href="#Prototype" class="headerlink" title="[[Prototype]]"></a>[[Prototype]]</h2><p>JS中的<strong>对象</strong>有一个特殊的[[Prototype]]内置属性，其实就是<strong>对于其他对象的引用</strong>。<br>几乎 所有的对象在创建时[[Prototype]]属性都会被赋予一个非空的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把myObject的prototype关联到anotherObject</span></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="built_in">Object</span>.create( anotherObject )</span><br><span class="line"></span><br><span class="line">myObject.a <span class="comment">//2</span></span><br></pre></td></tr></table></figure><hr><h3 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h3><p>所有普通的[[prototype]]链最终都会指向内置的<em>Object.prototype<em>，有些功能你应该很熟悉了，比如说.</em>toString()<em>和.</em>valueOf()</em>     .<em>hasOwnProperty(..)</em>等等</p><hr><h3 id="给一个对象设置属性的过程"><a href="#给一个对象设置属性的过程" class="headerlink" title="给一个对象设置属性的过程"></a>给一个对象设置属性的过程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.foo = <span class="string">"bar"</span></span><br></pre></td></tr></table></figure><ul><li><p>如果myObject对象中包含名为foo的<strong>普通数据访问属性</strong>，这条赋值语句只会<strong>修改已有</strong>的属性值。</p></li><li><p>如果foo不直接存在myObject中，<strong>原型链</strong>就会<strong>被遍历</strong>，类似<strong>[[Get]]</strong>操作。<br>如果<strong>原型链上找不到foo</strong>，foo就会被<strong>直接添加到myObject</strong>上。</p></li><li><p>如果foo<strong>存在于原型链上层</strong>：</p></li></ul><ol><li>如果原型链上层存在名为foo的<strong>普通数据访问属性</strong>并且<em>writable:true</em>，那么就会<strong>直接在myObject中添加</strong>一个名为foo的新属性，它是<strong>屏蔽属性</strong>。</li><li>如果原型链上层存在foo但是为<strong>writable:false</strong>，那么无法修改已有属性或者在myObject上创建屏蔽属性。<strong>如果运行在严格模式下，代码会抛出错误，否则这条赋值语句会被忽略</strong>。<br>只读属性会阻止原型链下层隐式创建同名属性，主要是为了模拟类属性的继承。</li><li>如果在原型链上层存在foo并且它是一个<em>setter</em>，那就一定会调用这个<em>setter</em>。foo不会被添加到myObject，也不会重新定义foo这个<em>setter</em>。</li></ol><p>如果你希望在2、3两种情况下也能创建屏蔽foo，那就不能使用=来赋值，而是使用<br><em>Object.defineProperty(..)</em></p><hr><h3 id="有些情况下会隐式产生屏蔽"><a href="#有些情况下会隐式产生屏蔽" class="headerlink" title="有些情况下会隐式产生屏蔽"></a>有些情况下会隐式产生屏蔽</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObj = <span class="built_in">Object</span>.create( anotherObj )</span><br><span class="line"></span><br><span class="line">anotherObj.a <span class="comment">//2</span></span><br><span class="line">myObj.a <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">anotherObj.hasOwnProperty(<span class="string">"a"</span>) <span class="comment">//true</span></span><br><span class="line">myObj.hasOwnProperty(<span class="string">"a"</span>) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">myObj.a++ <span class="comment">//隐式屏蔽！</span></span><br><span class="line"></span><br><span class="line">anotherObj.a <span class="comment">//2</span></span><br><span class="line">myObj.a <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">myObj.hasOwnProperty(<span class="string">"a"</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><h3 id="prototype"><a href="#prototype" class="headerlink" title=".prototype"></a>.prototype</h3><p>在JS中，<strong>对象</strong>直接<strong>定义自己的行为</strong>。<br>所有的函数默认都会拥有一个名为<em>prototype</em>的<strong>公有</strong>并且<strong>不可枚举</strong>的<strong>属性</strong>，它会<strong>指向另一个对象</strong><br>关于这个对象最直接的解释就是通过<strong>调用<em>new Foo()</em>创建的每个对象将最终被原型链链接到这个“<em>Foo.prototype</em>”对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype <span class="comment">// &#123; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototyeOf( a ) === Foo.prototype <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>JS(默认)并不会复制对象属性，相反它会在两个对象之间<strong>创建一个关联</strong>，这样一个对象就可以通过委托访问另一个对象的属性和函数。</p><hr><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title=".constructor"></a>.constructor</h3><p>Foo.prototype默认有一个公有并且不可枚举的属性.constructor。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.constructor === Foo <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line">a.constructor === Foo <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>实际上，Foo和程序中的其他函数没有任何区别。函数本身并不是构造函数。然而当你在普通的函数调用前面加上<em>new</em>关键字之后，就会把这个函数调用变成一个“<strong>构造函数调用</strong>”。实际上，<em>new</em>会劫持所有普通函数并用构造对象的形式来调用它。<br>换句话说，在JS中对于“<strong>构造函数</strong>”最准确的解释是，<strong>所有带new的函数调用</strong>。<br><strong>函数不是构造函数，但是当且仅当使用new时，函数调用会变成“构造函数调用”</strong>。</p><p><em>a.constructor</em>只是通过默认的原型链委托指向Foo。</p><p><em>Foo.prototype</em>的.<em>constructor</em>属性只是Foo函数在声明时的默认属性。如果你创建了一个新对象并替换了函数默认的.<em>prototype</em>对象引用，那么新对象并不会自动获得.<em>constructor</em>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype = &#123; ... &#125; <span class="comment">//创建一个新原型对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line">a.constructor === Foo <span class="comment">// false</span></span><br><span class="line">a.constructor === <span class="built_in">Object</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>最好的方法是记住——<strong>constructor并不表示（对象）被（它）构造</strong>。<br><em>a.constructor</em>是一个非常不可靠并且不安全的引用，通常来说要尽量避免使用这些引用。</p><hr><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create(..)"></a>Object.create(..)</h3><p>创建一个新对象并<strong>把新对象内部的原型关联到你指定的对象</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个新的Bar.prototype对象并关联到Foo.prototype</span></span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create( Foo.prototype )</span><br></pre></td></tr></table></figure><p>注意下面两种错误方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bar.prototype = Foo.prototype</span><br></pre></td></tr></table></figure><p>并不会创建一个关联到Foo.prototype的新对象，只是让Bar.prototype直接引用Foo.prototype对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bar.prototype = <span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure><p>的确会创建一个关联到Foo.prototype的新对象，但是它使用了Foo()的“构造函数调用”，如果函数Foo有一些副作用，比如写日志、修改状态、注册到其他对象、给this添加数据属性等等，就会影响到Bar()的“后代”，后果不堪设想。</p><hr><h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf(..)"></a>Object.setPrototypeOf(..)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6之前需要抛弃默认的Bar.prototype来关联到Foo.prototype</span></span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create( Foo.prototype )</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6开始可以直接修改现有的Bar.prototype来关联到Foo.prototype</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf( Bar.prototype, Foo.prototype )</span><br></pre></td></tr></table></figure><hr><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.blah = ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line">a <span class="keyword">instanceof</span> Foo <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><em>instanceof</em>的含义是：在a的整条原型链中是否有<em>Foo.prototype</em>指向的对象。<br>这个方法只能处理<strong>对象</strong>和<strong>函数</strong>之间的关系，如果你想判断两个对象之间是否通过原型链关联，只用<em>instanceof</em>无法实现。</p><hr><h3 id="isPrototypeOf-NaN"><a href="#isPrototypeOf-NaN" class="headerlink" title=".isPrototypeOf"></a>.isPrototypeOf</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b是否出现在c的原型链中</span></span><br><span class="line">b.isPrototypeOf( c )</span><br></pre></td></tr></table></figure><hr><h3 id="Prototype-机制的意义"><a href="#Prototype-机制的意义" class="headerlink" title="[[Prototype]]机制的意义"></a>[[Prototype]]机制的意义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    something: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Tell me something good..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="built_in">Object</span>.create( foo )</span><br><span class="line"></span><br><span class="line">bar.something() <span class="comment">//Tell me something good...</span></span><br></pre></td></tr></table></figure><p><em>Object.create(..)</em>创建一个新对象bar并把它关联到我们指定的对象，这样可以充分发挥原型机制的委托威力并且避免不必要的麻烦（比如使用new的构造函数调用会生成.prototype和.constructor引用）</p><hr><h3 id="Object-create-null"><a href="#Object-create-null" class="headerlink" title="Object.create(null)"></a>Object.create(null)</h3><p>创建一个没有原型链的对象，所以instanceof无法进行判断，总是会返回false。<br>这些特殊的空原型对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。</p><hr><h3 id="将原型作为默认值"><a href="#将原型作为默认值" class="headerlink" title="将原型作为默认值"></a>将原型作为默认值</h3><p><em>Function.prototype</em>是一个空函数<br><em>RegExp.prototype</em>是一个“空”的正则表达式（无任何匹配）<br><em>Array.prototype</em>是一个空数组<br>对未赋值的变量来说，它们是很好的默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isThisCool</span>(<span class="params">vals, fn, rx</span>) </span>&#123;</span><br><span class="line">    vals = vals || <span class="built_in">Array</span>.prototype</span><br><span class="line">    fn = fn || <span class="built_in">Function</span>.prototype</span><br><span class="line">    rx = rx || <span class="built_in">RegExp</span>.prototype</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> rx.text(</span><br><span class="line">        val.map( fn ).join(<span class="string">""</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isThisCool()   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">isThisCool([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>], </span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v.toUpperCase() &#125;,</span><br><span class="line">            /D/</span><br><span class="line">)    <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>从<strong>ES6</strong>开始，不再需要上述方法来设置默认值，因为默认值可以通过函数声明中的内置语法来设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y=<span class="string">'world'</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> prototype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this</title>
      <link href="/2019/12/25/this/"/>
      <url>/2019/12/25/this/</url>
      
        <content type="html"><![CDATA[<h3 id="this简介"><a href="#this简介" class="headerlink" title="this简介"></a>this简介</h3><p>this是在<strong>运行时</strong>进行<strong>绑定</strong>的，并不是在编写时绑定，它的上下文取决于函数调用时的各种条件。<br>this的绑定和函数声明的位置没有任何关系，只<strong>取决于函数的调用方式/位置</strong>。<br>调用位置就是函数在代码中被调用的位置，而不是声明的位置。<br>使用开发者工具得到调用栈call stack（通过设置断点或者插入debugger）,然后找到栈中的第二个元素，就是真正的调用位置。</p><p>this提供了一种更优雅的方式来“传递”一个对象引用，因此可以将API设计得更加简洁并且易于复用。</p><p>this在任何情况下都不指向函数的词法作用域。<br>在JS内部，作用域确实和对象类似，可见的标识符都是它的属性。<br>但是作用域“对象”无法通过JS代码访问，它存在于JS引擎内部。</p><h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">foo() <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>在本例中，函数调用时是直接使用不带任何修饰的函数引用进行调用的，因此应用了this的默认绑定，因此<strong>this指向全局对象</strong>。<br>而声明在全局作用域中的变量就是全局对象的一个同名属性，它们本质上是一个东西。<br>如果使用严格模式，则不能将全局对象用于默认绑定，因此this会绑定在undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">//TypeError: this is undefined</span></span><br></pre></td></tr></table></figure><p>需要注意的是，虽然this的绑定规则完全取决于调用位置，但是若foo()运行在非严格模式下，而调用foo()在严格模式下， 则不影响this默认绑定到全局变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">     foo(); <span class="comment">// 2</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>无论是直接在obj中定义还是先定义再添加为引用属性，这个函数严格来说都不属于obj对象。然而调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时obj对象“拥有”或者“包含”函数引用。</p><p>当函数引用时有上下文对象，隐式绑定会将函数调用中的this绑定到这个上下文对象。</p><p>对象属性引用链中只有上一层或者说最后一层在调用位置中起作用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">42</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    obj2: obj2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj1.obj2.foo(); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>隐式丢失：<br>一个最常见的this绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把this绑定到全局对象或者undefined上（取决于是否是严格模式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = obj.foo</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops, global"</span></span><br><span class="line"></span><br><span class="line">bar() <span class="comment">//"oops,global"</span></span><br></pre></td></tr></table></figure><p>虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()其实是一个不带任何修饰的函数调用，因此应用了默认绑定。<br>一种更出乎意料的情况发生在传入回调函数时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doFoo</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//fn其实引用的是foo</span></span><br><span class="line">    fn() <span class="comment">//  &lt;-- 调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops,global"</span> </span><br><span class="line"></span><br><span class="line">doFoo(obj.foo) <span class="comment">//"oops,global"</span></span><br></pre></td></tr></table></figure><p><strong>参数传递其实就是一种隐式赋值</strong>，因此我们传入函数时也会被隐式赋值，所以结果和上一个例子一样。<br>如果把函数传入语言内置的函数而不是传入自己声明的函数，结果是一样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  a = <span class="string">"oops,global"</span></span><br><span class="line"></span><br><span class="line">setTimeout( obj.foo, <span class="number">100</span> ) <span class="comment">//"oops, global"</span></span><br></pre></td></tr></table></figure><p>所以回调函数丢失this绑定是很常见的，之后会说如何通过固定this来修复这个问题。</p><h3 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h3><p>隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把this间接（隐式）绑定到这个对象上。<br>如何在某个对象上强制调用函数。</p><p>可以使用函数的<em>call</em>和<em>apply</em>方法。<br>JS提供的绝大多数函数以及你自己创建的所有函数都可以使用<em>call</em>和<em>apply</em>方法</p><p>它们的第一个参数是一个对象，是给this准备的，在调用函数时可以将这个设置的对象绑定到this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.call( obj ) <span class="comment">// 2   在调用foo的时候把它的this强制绑定到obj上</span></span><br></pre></td></tr></table></figure><p>如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值会被转换成它的对象形式（也就是new String(..) new Boolean(…)或者new Number(..)）。这通常被称为“装箱”。</p><p>从this绑定的角度来说，call和apply是一样的，它们的区别在其他参数上。</p><p>显式绑定仍然无法解决之前提到的绑定丢失的问题，但是显式绑定的一个变种可以解决这个问题：<br><strong>硬绑定</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo.call( obj );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">//2</span></span><br><span class="line">setTimeout( bar, <span class="number">100</span>) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//硬绑定的bar不可能再修改它的this</span></span><br><span class="line">bar.call( <span class="built_in">window</span> ) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>无论之后如何调用函数bar，它总会手动在obj上调用foo。这种绑定是一种显式地强制绑定，因此我们称之为硬绑定。<br>硬绑定的典型应用场景就是创建一个包裹函数，负责接收参数并返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a, something );</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo.apply( obj, <span class="built_in">arguments</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = bar( <span class="number">3</span> ) <span class="comment">// 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log( b )<span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>另一种使用方法是创建一个可以重复使用的辅助函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, something)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单的辅助绑定函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply( obj, <span class="built_in">arguments</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = bind( foo, obj )</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = bar( <span class="number">3</span> ) <span class="comment">//2 3</span></span><br><span class="line"><span class="built_in">console</span>.log( b ) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>由于硬绑定是一种非常常用的模式，所以ES5提供了内置的方法<em>Function.prototype.bind</em>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a + something )</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.bind( obj )</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = bar( <span class="number">3</span> ) <span class="comment">// 2 3</span></span><br><span class="line"><span class="built_in">console</span>.log( b ) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p><em>bind(..)</em>会返回一个硬编码的新函数，它会把你指定的参数设置为this的上下文并调用原始函数</p><p>第三方库的许多函数，以及JS语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为“上下文context”，其作用和bind(..)一样，确保你的回调函数使用指定的this：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( el, <span class="keyword">this</span>.id )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    id: <span class="string">"awesome"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用foo(..)时把this绑定到obj</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(foo, obj)</span><br><span class="line"><span class="comment">// 1 awesome 2 awesome 3 awesome</span></span><br></pre></td></tr></table></figure><p>这些函数实际上就是通过<em>call</em>或者<em>apply</em>实现了显式绑定。</p><h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h3><p>js中的new机制实际上和面向类的语言完全不同。</p><p>在JS中，构造函数只是一些使用new操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。</p><p>使用new来调用函数，会自动执行下面的操作：<br>1.创建（或者说构造）一个全新的对象<br>2.这个新对象会被执行[[Prototype]]连接<br>3.这个新对象会绑定到函数调用的this<br>4.如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log( bar.a ) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>默认绑定是四条规则中优先级最低的<br>显式绑定 &gt; 隐式绑定<br>new绑定 &gt; 隐式绑定</p><p>主要规则：<br>1.函数是否在new中调用？是的话this绑定的是新创建的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo()</span><br></pre></td></tr></table></figure><p>2.函数是否通过call, apply或者硬绑定调用？是的话，this指定的是指定的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = foo.call(obj2)</span><br></pre></td></tr></table></figure><p>3.函数是否在某个上下文对象中调用（隐式绑定）？是的this绑定的是那个上下文对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = obj1.foo()</span><br></pre></td></tr></table></figure><p>4.如果都不是，则是默认绑定。在严格模式下绑定到undefined，在非严格模式下，绑定到全局对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = foo()</span><br></pre></td></tr></table></figure><p>特殊情况：<br>1.如果把null或undefined作为this的绑定对象传入call、apply或者bind，这些值会在调用时被忽略，实际应用的是默认绑定规则。<br>什么情况下会传入null呢？<br>一种非常常见的做法是使用apply来“展开”一个数组，并当作参数传入一个函数<br>类似地，bind可以对参数进行科里化（预先设置一些参数），这种方法有时非常有用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a:"</span> + a + <span class="string">", b:"</span> + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把数组 展开 成参数</span></span><br><span class="line">foo.apply(<span class="literal">null</span>, [<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// a:2,b:3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bind进行科里化</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.bind(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">bar( <span class="number">3</span> ) <span class="comment">//a:2,b:3</span></span><br></pre></td></tr></table></figure><p>注意，在ES6中可以用…操作符代替apply来展开数组，foo(…[2,3])和foo(2,3)是一样的。<br>不过在ES6中没有科里化相关语法，因此还是需要使用bind</p><p>一种“更安全”的做法是传入一个特殊的对象，把this绑定到这个对象不会对你的程序产生任何副作用。<br>由于这个对象完全是一个空对象，我自己喜欢用变量名∅来表示它。</p><p>在JS中创建一个空对象最简单的方法是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>Object.create(null)和{ }很像，但是并不会创建Object.prototype这个委托，所以它比{ }更空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a:"</span> + a + <span class="string">", b:"</span> + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ∅ = <span class="built_in">Object</span>.create( <span class="literal">null</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">//把数组展开成参数</span></span><br><span class="line">foo.apply( ø, [<span class="number">2</span>, <span class="number">3</span>] ) <span class="comment">//a:2,b:3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bind进行科里化</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.bind( ø, <span class="number">2</span> )</span><br><span class="line">bar( <span class="number">3</span> ) <span class="comment">//a:2,b:3</span></span><br></pre></td></tr></table></figure><h3 id="软绑定"><a href="#软绑定" class="headerlink" title="软绑定"></a>软绑定</h3><p>使用硬绑定会大大降低函数的灵活性，使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改this。<br>如果可以给默认绑定指定一个全局对象或者undefined以外的值，那就可以实现和硬绑定相同的效果，同时保留隐式绑定或显式绑定修改this的能力。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Function</span>.prototype.softBind) &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.softBind = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fn = <span class="keyword">this</span></span><br><span class="line">        <span class="comment">//捕获所有curried参数</span></span><br><span class="line">        <span class="keyword">var</span> curried = [].slice.call( <span class="built_in">arguments</span>, <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">var</span> bound = fucntion() &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(</span><br><span class="line">                (!<span class="keyword">this</span> || <span class="keyword">this</span> === (<span class="built_in">window</span> || global)) ?</span><br><span class="line">                    obj : <span class="keyword">this</span>,</span><br><span class="line">               curried.concat.apply( curried, <span class="built_in">arguments</span> )</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        bound.prototype = <span class="built_in">Object</span>.create( fn.prototype )</span><br><span class="line">        <span class="keyword">return</span> bound</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//返回一个箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this继承自foo()</span></span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.a )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.call( obj1 )</span><br><span class="line">bar.call( obj2 ) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>foo内部创建的箭头函数会捕获调用时foo()的this，由于foo()的this绑定到obj1，bar(引用箭头函数)的this也会绑定到obj1，箭头函数的绑定无法被修改。(new也不行)。<br>箭头函数最常用于回调函数中，例如事件处理器或者定时器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这里的this在词法上继承自foo()</span></span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.a )</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.call( obj ) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我梦见你梦见我</title>
      <link href="/2019/12/25/hello-world/"/>
      <url>/2019/12/25/hello-world/</url>
      
        <content type="html"><![CDATA[<center>梦里的时间总觉得长</center><center>不过是一刹那</center><center>却总以为是天长地久</center><center>好像彼此认识了许多年</center><center>原来都不算数的</center> ]]></content>
      
      
      <categories>
          
          <category> 乌鸡鲅鱼 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
